# Define action tags here

defaults: &defaults
  docker:
    - image: circleci/buildpack-deps:xenial-scm
  working_directory: ~/demo-pipeline

python_defaults: &python_defaults
  docker:
    - image: quay.io/encode-dcc/demo-pipeline:template
  working_directory: ~/demo-pipeline
 
machine_defaults: &machine_defaults
  machine: 
    image: circleci/classic:latest
  working_directory: ~/demo-pipeline

make_tag: &make_tag
  name: make docker image tag
  command: |
    echo "export TAG=quay.io/encode-dcc/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}_${CIRCLE_WORKFLOW_ID}" > ${BASH_ENV}

get_cromwell: &get_cromwell
  name: get the cromwell 35
  command: |
    wget -N -c https://github.com/broadinstitute/cromwell/releases/download/35/cromwell-35.jar

install_singularity: &install_singularity
  name: install singularity
  command: |
    sudo apt-get update
    sudo apt-get install \
    python \
    dh-autoreconf \
    build-essential \
    libarchive-dev \
    squashfs-tools
    wget https://github.com/singularityware/singularity/releases/download/2.6.0/singularity-2.6.0.tar.gz
    tar xvf singularity-2.6.0.tar.gz
    cd singularity-2.6.0
    ./configure --prefix=/usr/local --sysconfdir=/etc
    make
    sudo make install
    singularity --version

# Define jobs here
version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker
      - run: *make_tag
      - run:
          name: build image
          command: |
            source ${BASH_ENV}
            echo "pulling template!"
            docker pull quay.io/encode-dcc/demo-pipeline:template
            docker login -u=${QUAY_ROBOT_USER} -p=${QUAY_ROBOT_USER_TOKEN} quay.io
            docker build --cache-from quay.io/encode-dcc/demo-pipeline:template --build-arg GIT_COMMIT_HASH=${CIRCLE_SHA1} --build-arg BRANCH=${CIRCLE_BRANCH} --build-arg BUILD_TAG=${TAG} -t $TAG -t quay.io/encode-dcc/demo-pipeline:template -f docker_image/Dockerfile .
            docker push $TAG
            docker push quay.io/encode-dcc/demo-pipeline:template
            docker logout

  test_trimming_task:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *get_cromwell
      - run:
          command: |
            pyenv global 3.5.2
            java -jar cromwell-35.jar run test/test_task/test_trim.wdl -i test/test_task/test_trim.json -m metadata.json
            python3 src/compare_md5.py --keys_to_inspect trim.trimmed_fastq --metadata_json metadata.json --reference_json test/test_task/ref_output/test_trim_output_md5.json --outfile result.json
            cat result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < result.json
            
  test_plotting_task:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *get_cromwell
      - run:
          command: |
            pyenv global 3.5.2
            java -jar cromwell-35.jar run test/test_task/test_plot.wdl -i test/test_task/test_plot.json -m metadata.json
            python3 src/compare_md5.py --keys_to_inspect plot.plot_output --metadata_json metadata.json --reference_json test/test_task/ref_output/test_plot_output_md5.json --outfile result.json
            cat result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < result.json
 
  test_entrypoint:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *get_cromwell
      - run:
          command: |
            pyenv global 3.5.2
            java -jar cromwell-35.jar run toy.wdl -i test/test_workflow/test_entrypoint.json -m metadata.json
            python3 src/compare_md5.py --keys_to_inspect toy.trimmed_output --metadata_json metadata.json --reference_json test/test_workflow/ref_output/test_entrypoint_output_md5.json --outfile result.json
            cat result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < result.json

  test_workflow:
    <<: *machine_defaults
    steps:
      - checkout
      - run: *get_cromwell
      - run:
          command: |
            pyenv global 3.5.2
            java -jar cromwell-35.jar run toy.wdl -i test/test_workflow/test_workflow.json -m metadata.json
            python3 src/compare_md5.py --keys_to_inspect toy.trimmed_output toy.plots --metadata_json metadata.json --reference_json test/test_workflow/ref_output/test_workflow_output_md5.json --outfile result.json
            cat result.json
            python3 -c "import sys; import json; data=json.loads(sys.stdin.read()); sys.exit(int(not data['match_overall']))" < result.json

  test_python_scripts:
    <<: *python_defaults
    steps:
      - checkout
      - run:
          name: Test Python scripts
          command: |
            echo 'Running pytest'
            cd src && python3 -m pytest test

# Define workflow here
workflows:
  version: 2
  build_workflow:
    jobs:
      - build
      - test_python_scripts
          requires:
            - build
      - test_workflow
          requires:
            - build
      - test_trimming_task
          requires:
            - build
      - test_plotting_task
          requires:
            - build
